generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//This enum is to define type of notifications
enum NotificationType{
  COMMENT
  LIKE
  MESSAGE
  FOLLOW
}
model User {
  id           String    @id
  email        String?    @unique
  name         String
  username     String    @unique
  role String
  profilePic   String?
  githubLink String @unique
  description  String?
  contactLinks Json?
  onboarded Boolean @default(false)
  createdAt    DateTime  @default(now())
  publishedAt  DateTime  @updatedAt
  blogs        Blog[]
  comments     Comment[]
  followers    Follows[] @relation("followers")
  following    Follows[] @relation("following")
  likes        Like[]
  posts        Post[]
  projects     Project[]
  bookmarks Bookmark[]

  //For messages
  conversationsStarted Conversation[] @relation("userOne")
  conversationsReceived Conversation[] @relation("userTwo")
  messagesSent Message[] @relation("sender")
  messagesReceived Message[] @relation("receiver")

  //For notifications
  notifications Notification[] @relation("notificationsForUser") //Notification for this User
  triggeredActions Notification[] @relation("actorNotifications") //Notification caused by this User
}

model Post {
  id        String    @id @default(cuid())
  content   String
  imageUrl  String?
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])
  bookmarks Bookmark[]

  notifications Notification[]
}


model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // A user can only bookmark a post once
}
model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  post      Post?     @relation(fields: [postId], references: [id])
  projectId String?
  project Project? @relation(fields:[projectId],references: [id])
}

model Follows {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("followers", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])
}

model Project {
  id           String       @id @default(cuid())
  title        String
  description  String
  thumbnail    String
  githubUrl    String
  comments     Comment[]
  liveUrl      String?
  date         DateTime     @default(now())
  userId       String
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  technologies Technology[] @relation("ProjectTechnologies")
}

model Blog {
  id            String       @id @default(cuid())
  title         String
  description   String
  content       String
  blogThumbnail String
  publishedAt   DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  technologies  Technology[] @relation("BlogTechnologies")
}

model Technology {
  id       String    @id @default(cuid())
  name     String    @unique
  blogs    Blog[]    @relation("BlogTechnologies")
  projects Project[] @relation("ProjectTechnologies")
}


model Conversation{
  id String @id @default(cuid())
  userOneId String
  userTwoId String
  userOne User @relation("userOne",fields: [userOneId],references: [id],onDelete: Cascade)
  userTwo User @relation("userTwo",fields:[userTwoId],references: [id],onDelete: Cascade)
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userOneId,userTwoId])
}

model Message{
  id String @id @default(cuid())
  content String
  senderId String
  receiverId String
  conversationId String
  createdAt DateTime @default(now())
  sender User @relation("sender",fields:[senderId],references: [id],onDelete:Cascade)
  receiver User @relation("receiver",fields:[receiverId],references: [id],onDelete:Cascade)
  conversation Conversation @relation(fields: [conversationId],references:[id],onDelete:Cascade)
}


model Notification{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  type NotificationType
  read Boolean @default(false)

  //For the User who received notifications
  userId String
  user User @relation("notificationsForUser",fields:[userId],references: [id],onDelete:Cascade)

  //For the User who triggered notification
  actorId String
  actor User @relation("actorNotifications",fields:[actorId],references: [id],onDelete:Cascade)

  //For post related notifications(LIKE,COMMENT)
  postId String?
  post Post? @relation(fields:[postId],references: [id],onDelete:Cascade)

  @@unique([userId,postId,actorId,type])
}